(def defn
  (lambda (name params expr)
    (def name (lambda params expr))))
(defn f-inc-by-n (n) (lambda (x) (+ x n)))
(def f-5 (f-inc-by-n 5))
(f-5 3)
f-5
(defn range (n)
  (if (eq? n 0) () (cons n (range (+ n -1)))))
range
(range 5)
(defn reduce (list f)
  (if (eq? (tail list) ()) (head list)
    (if (eq? (tail (tail list)) ()) (f (head list) (head (tail list)))
      (f (head list) (reduce (tail list) f)))))
(reduce (range 10) +)
(exit)
(defn filter (list f)
  (if (eq? list ()) ()
    (if (f (head list))
      (cons (head list) (filter (tail list) f))
        (filter (tail list) f))))
(filter (quote (1 2 3 1 2 1 1 2)) (\ (x) (or (eq? x 1) (eq? x 3))))
(exit)
(defn map (list f) (if (eq? list ()) () (cons (f (head list)) (map (tail list) f))))
(map (quote (2 3 4)) (\ (x) (+ x x x)))
(exit)
